(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



Waterwheel[numbuckets_,inflow_,outflow_,rayleigh_,radius_,finaltime_,initangle_,initvel_]:=Module[{n,numbuck,\[Rho], k,Qc,\[Omega]0,\[Theta]0,g,r,final,\[Theta]c,\[Sigma],init,func,eqns,theta,omega,m,M,totalmass,data},
Clear[qn,qzero,v,i,alst,blst,a,b,sol];
(* Parameters *) 
n=5; (* "Accuracy" of fourier series *)
numbuck=numbuckets; (* Number of buckets*)
\[Rho]=rayleigh; (* Rayleigh number - set to 28 *)
Qc=inflow; (* Inflow parameter - must be bigish, say 10*)
k=outflow; (* Outflow parameter - 1 is a good choice *)
final=finaltime; (* Effective time interval length *)
r=radius; (* Length of attaching rod *)
\[Omega]0=initvel; (* Initial angular velocity *)
\[Theta]0=initangle; (* Initial angle *)
(* Parameters *)
\[Theta]c=\[Pi]/18; (* Interval of stream inflow*)
\[Sigma]=10;
qn[n_] := (2*Qc*Sin[n*\[Theta]c])/(n*\[Pi]); (* Inflow function *)
qzero=(2*Qc*\[Theta]c)/\[Pi]; (* Inflow function for n = 0*)

v[n_]:=(\[Pi]*g*r*qn[n])/(\[Rho]*k^2); (* Damping due to rotation *)
i[n_] := v[n]/(\[Sigma]*k); (* Moment of inertia *)

g=9.8; (* Gravitational constant *)

(* Initial conditions *)
init=Join[Flatten[Table[{a[j][0]==0,b[j][0]==0},{j,0,n}]],{\[Omega][0]==\[Omega]0,\[Theta][0]==\[Theta]0}];
(* Function definitions *)
func=Join[Flatten[Table[{a[j][t],b[j][t]},{j,0,n}]],{\[Omega][t],\[Theta][t]}];
(* Equations *)
eqns =Join[{Derivative[1][a[0]][t]==-k*a[0][t],Derivative[1][b[0]][t]==qzero-k*b[0][t]}, Join[Flatten[Table[{a[j]'[t]==j*\[Omega][t]*b[j][t]-k*a[j][t],b[j]'[t]==-j*\[Omega][t]*a[j][t]-k*b[j][t] +qn[j]},{j,1,n}]],
{\[Omega]'[t]==(-v[1]*\[Omega][t] +\[Pi]*g*r*a[1][t])/i[1],\[Theta]'[t] ==\[Omega][t]}]];
(* Solve equations *)
sol=Flatten[NDSolve[Join[eqns,init],func,{t,0,final},MaxSteps->100000]];
(* Angle and angular velocity *)
theta[t_]=\[Theta][t]/.sol[[-1]];
omega[t_]=\[Omega][t]/.sol[[-2]];
(* Lists of interpolating functions *)
alst=Join[{First[Drop[sol,-2]]},Table[Drop[sol,-2][[2*i+1]],{i,1,n}]];
blst=Join[Table[Drop[sol,-2][[2*i]],{i,1,n}],{Last[Drop[sol,-2]]}];
(* a[t] and b[t] *)
Flatten[Table[{a[i-1][t_]=a[i-1][t]/.alst[[i]]},{i,1,n+1}]];
Flatten[Table[{b[i-1][t_]=b[i-1][t]/.blst[[i]]},{i,1,n+1}]];
(* Total Mass function *)
m[\[Alpha]_,t_]:=Sum[a[i][t]*Sin[i*\[Alpha]] + b[i][t]*Cos[i*\[Alpha]],{i,0,n}];
(*totalmass[t_]:=NIntegrate[m[\[Alpha],t],{\[Alpha],0,2\[Pi]}];*)
(* Mass Sector function for each time *)
M[t_]:=Table[NIntegrate[m[\[Alpha],t],{\[Alpha],theta[t]+i*(2\[Pi])/numbuck,theta[t]+(i+1)*(2\[Pi])/numbuck}],{i,0,numbuck-1}];
(* Data *)
(*x[t_]:=r*theta[t Degree];
y[t_]:=r*theta[t Degree];*)
(*plotdata=Table[{x[i],y[i]},{i,0.05,final,0.05}];*)
(*ParametricPlot[{y[t],x[t]},{t,0,final},PlotRange->All]*)
data=Table[Join[{theta[i]},Join[{a[1][i],b[1][i],omega[i]}],M[i]],{i,0.05,final,0.05}]
]
